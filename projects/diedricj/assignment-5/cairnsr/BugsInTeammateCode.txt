Bug-Reports


The first bug found in my teammates code was the check for a valid day in the TimeTable class.  The statement is supposed to check and make sure that the first day if before the last day.  The correct code would look like this:


if (firstDay.before(lastDay)) {


This correct code is checking to make sure that you are not creating calendar instances with invalid days (you can go from march 4 to march 5, but not march 5 to march 4).  The bug in my teammates code is caused by adding a ‘!’ before the statement, as shown below:


if (!firstDay.before(lastDay)) {


This causes the program to think valid calendar days are actually invalid.  It would also allow you to give invalid day and have the program think the days are valid.


This bug was first found when I ran my tests.  My test suite’s checked to make sure that the isvalid function worked under TimeTable, so I got an error thrown when trying to run the incorrect code.  I then used the IntelliJ debugger to find the line where we threw the exception.  I then tried to put in invalid calendar days, and the tests passed.  Because of this I knew the statement had to be reversed.  You can find this bug in the TimeTable class on line 39.


The second bug found in my teammates code was checking for leap days.  The correct code is supposed to check if the year modded by 4 is a 0.  This would mean that it is in fact a leap year, because these happen every four years.  The correct code is shown below:


if ((year % 4) == 0) {


This is the correct code to check for a leap year.  My opponents bug looked like this:


if ((year % 4) == 1) {


This bug was found by my test suite for assignment 3.  I had some tests in there for checking that the valid day functionality was correct.  The test added a leap year and checked the correct date.  When this test ran, however, the assertion failed, because the day should have been invalid.  IntelliJ cited which test failed, so I was able to find it easily, as it showed the assertion expected and actual.
